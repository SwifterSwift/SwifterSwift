#if !canImport(ObjectiveC)
import XCTest

extension ArrayExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArrayExtensionsTests = [
        ("testDivided", testDivided),
        ("testKeyPathSorted", testKeyPathSorted),
        ("testPrepend", testPrepend),
        ("testRemoveAll", testRemoveAll),
        ("testRemoveAllItems", testRemoveAllItems),
        ("testRemoveDuplicates", testRemoveDuplicates),
        ("testSafeSwap", testSafeSwap),
        ("testWithoutDuplicates", testWithoutDuplicates),
    ]
}

extension BidirectionalCollectionExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BidirectionalCollectionExtensionsTests = [
        ("testOffsetSubscript", testOffsetSubscript),
    ]
}

extension BinaryFloatingPointExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinaryFloatingPointExtensionsTests = [
        ("testRounded", testRounded),
    ]
}

extension BoolExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BoolExtensionsTests = [
        ("testInt", testInt),
        ("testString", testString),
    ]
}

extension CharacterExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CharacterExtensionsTests = [
        ("testInt", testInt),
        ("testIsEmoji", testIsEmoji),
        ("testLowercased", testLowercased),
        ("testOperators", testOperators),
        ("testRandom", testRandom),
        ("testString", testString),
        ("testUppercased", testUppercased),
    ]
}

extension CollectionExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CollectionExtensionsTests = [
        ("testAverage", testAverage),
        ("testForEachInParallel", testForEachInParallel),
        ("testForEachSlice", testForEachSlice),
        ("testGroupBySize", testGroupBySize),
        ("testIndicesWhere", testIndicesWhere),
        ("testSafeSubscript", testSafeSubscript),
    ]
}

extension ComparableExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ComparableExtensionsTests = [
        ("testClamped", testClamped),
        ("testIsBetween", testIsBetween),
    ]
}

extension DictionaryExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DictionaryExtensionsTests = [
        ("testCompactMapKeysAndValues", testCompactMapKeysAndValues),
        ("testHasKey", testHasKey),
        ("testJsonData", testJsonData),
        ("testJsonString", testJsonString),
        ("testKeysForValue", testKeysForValue),
        ("testLowercaseAllKeys", testLowercaseAllKeys),
        ("testMapKeysAndValues", testMapKeysAndValues),
        ("testOperatorMinus", testOperatorMinus),
        ("testOperatorPlus", testOperatorPlus),
        ("testOperatorPlusEqual", testOperatorPlusEqual),
        ("testOperatorRemoveKeys", testOperatorRemoveKeys),
        ("testRemoveAll", testRemoveAll),
        ("testRemoveElementForRandomKey", testRemoveElementForRandomKey),
        ("testSubscriptKeypath", testSubscriptKeypath),
    ]
}

extension DoubleExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DoubleExtensionsTests = [
        ("testCGFloat", testCGFloat),
        ("testFloat", testFloat),
        ("testInt", testInt),
        ("testOperators", testOperators),
    ]
}

extension FloatExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FloatExtensionsTests = [
        ("testCGFloat", testCGFloat),
        ("testDouble", testDouble),
        ("testInt", testInt),
        ("testOperators", testOperators),
    ]
}

extension FloatingPointExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FloatingPointExtensionsTests = [
        ("testAbs", testAbs),
        ("testCeil", testCeil),
        ("testDegreesToRadians", testDegreesToRadians),
        ("testFloor", testFloor),
        ("testIsNegative", testIsNegative),
        ("testIsPositive", testIsPositive),
        ("testOperators", testOperators),
        ("testRadiansToDegrees", testRadiansToDegrees),
    ]
}

extension IntExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IntExtensionsTests = [
        ("testCGFloat", testCGFloat),
        ("testCountableRange", testCountableRange),
        ("testDegreesToRadians", testDegreesToRadians),
        ("testDigits", testDigits),
        ("testDigitsCount", testDigitsCount),
        ("testDouble", testDouble),
        ("testFloat", testFloat),
        ("testIsPrime", testIsPrime),
        ("testKFormatted", testKFormatted),
        ("testOperators", testOperators),
        ("testRadiansToDegrees", testRadiansToDegrees),
        ("testRomanNumeral", testRomanNumeral),
        ("testRoundToNearest", testRoundToNearest),
        ("testUInt", testUInt),
    ]
}

extension OptionalExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OptionalExtensionsTests = [
        ("testConditionalAssignment", testConditionalAssignment),
        ("testIsNilOrEmpty", testIsNilOrEmpty),
        ("testNonEmpty", testNonEmpty),
        ("testOptionalAssignment", testOptionalAssignment),
        ("testRunBlock", testRunBlock),
        ("testUnwrappedOrDefault", testUnwrappedOrDefault),
        ("testUnwrappedOrError", testUnwrappedOrError),
    ]
}

extension RandomAccessCollectionExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RandomAccessCollectionExtensionsTests = [
        ("testIndices", testIndices),
    ]
}

extension RangeReplaceableCollectionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RangeReplaceableCollectionTests = [
        ("testInitExpressionOfSize", testInitExpressionOfSize),
        ("testKeepWhile", testKeepWhile),
        ("testRemoveRandomElement", testRemoveRandomElement),
        ("testRemoveWhere", testRemoveWhere),
        ("testRotate", testRotate),
        ("testRotated", testRotated),
        ("testSkipWhile", testSkipWhile),
        ("testTakeWhile", testTakeWhile),
    ]
}

extension SequenceExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SequenceExtensionsTests = [
        ("testAccumulate", testAccumulate),
        ("testAllMatch", testAllMatch),
        ("testAnyMatch", testAnyMatch),
        ("testContains", testContains),
        ("testContainsDuplicates", testContainsDuplicates),
        ("testCountWhere", testCountWhere),
        ("testDuplicates", testDuplicates),
        ("testFilteredMap", testFilteredMap),
        ("testForEachReversed", testForEachReversed),
        ("testForEachWhere", testForEachWhere),
        ("testLastWhere", testLastWhere),
        ("testNoneMatch", testNoneMatch),
        ("testRejectWhere", testRejectWhere),
        ("testSingle", testSingle),
        ("testSum", testSum),
        ("testWithoutDuplicates", testWithoutDuplicates),
    ]
}

extension SignedIntegerExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SignedIntegerExtensionsTests = [
        ("testAbs", testAbs),
        ("testGcd", testGcd),
        ("testIsEven", testIsEven),
        ("testIsNegative", testIsNegative),
        ("testIsOdd", testIsOdd),
        ("testIsPositive", testIsPositive),
        ("testLcm", testLcm),
        ("testString", testString),
        ("testTimeString", testTimeString),
    ]
}

extension SignedNumericExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SignedNumericExtensionsTests = [
        ("testAsLocaleCurrency", testAsLocaleCurrency),
        ("testString", testString),
    ]
}

extension StringExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringExtensionsTests = [
        ("testAppendingPathComponent", testAppendingPathComponent),
        ("testAppendingPathExtension", testAppendingPathExtension),
        ("testBase64Decoded", testBase64Decoded),
        ("testBase64Encoded", testBase64Encoded),
        ("testBold", testBold),
        ("testBool", testBool),
        ("testCamelCased", testCamelCased),
        ("testCamelize", testCamelize),
        ("testCgFloat", testCgFloat),
        ("testCharactersArray", testCharactersArray),
        ("testColored", testColored),
        ("testContain", testContain),
        ("testContainEmoji", testContainEmoji),
        ("testCopyToPasteboard", testCopyToPasteboard),
        ("testCount", testCount),
        ("testDate", testDate),
        ("testDateTime", testDateTime),
        ("testDateWithFormat", testDateWithFormat),
        ("testDouble", testDouble),
        ("testEnd", testEnd),
        ("testFirstCharacter", testFirstCharacter),
        ("testFirstCharacterUppercased", testFirstCharacterUppercased),
        ("testFloat", testFloat),
        ("testHasLetters", testHasLetters),
        ("testHasNumbers", testHasNumbers),
        ("testHasUniqueCharacters", testHasUniqueCharacters),
        ("testInitFromBase64", testInitFromBase64),
        ("testInitRandomOfLength", testInitRandomOfLength),
        ("testInt", testInt),
        ("testIntOrdinal", testIntOrdinal),
        ("testIntSpellOut", testIntSpellOut),
        ("testIsAlphabetic", testIsAlphabetic),
        ("testIsAlphaNumeric", testIsAlphaNumeric),
        ("testIsDigits", testIsDigits),
        ("testIsNumeric", testIsNumeric),
        ("testIsPalindrome", testIsPalindrome),
        ("testIsSpelledCorrectly", testIsSpelledCorrectly),
        ("testisValidEmail", testisValidEmail),
        ("testIsValidFileURL", testIsValidFileURL),
        ("testIsValidHttpsUrl", testIsValidHttpsUrl),
        ("testIsValidHttpUrl", testIsValidHttpUrl),
        ("testIsValidSchemedUrl", testIsValidSchemedUrl),
        ("testIsValidUrl", testIsValidUrl),
        ("testIsWhiteSpaces", testIsWhiteSpaces),
        ("testItalic", testItalic),
        ("testLastCharacter", testLastCharacter),
        ("testLastDeletingLastPathComponent", testLastDeletingLastPathComponent),
        ("testLastDeletingPathExtension", testLastDeletingPathExtension),
        ("testLastPathComponent", testLastPathComponent),
        ("testLastPathComponents", testLastPathComponents),
        ("testLastPathExtension", testLastPathExtension),
        ("testLatinize", testLatinize),
        ("testLatinized", testLatinized),
        ("testLines", testLines),
        ("testLocalized", testLocalized),
        ("testLoremIpsum", testLoremIpsum),
        ("testMatches", testMatches),
        ("testMostCommonCharacter", testMostCommonCharacter),
        ("testNSString", testNSString),
        ("testOperators", testOperators),
        ("testPaddingEnd", testPaddingEnd),
        ("testPaddingStart", testPaddingStart),
        ("testPadEnd", testPadEnd),
        ("testPadStart", testPadStart),
        ("testRandom", testRandom),
        ("testRemovingPrefix", testRemovingPrefix),
        ("testRemovingSuffix", testRemovingSuffix),
        ("testReverse", testReverse),
        ("testSlice", testSlice),
        ("testStart", testStart),
        ("testStrikethrough", testStrikethrough),
        ("testSubscript", testSubscript),
        ("testToSlug", testToSlug),
        ("testTrim", testTrim),
        ("testTrimmed", testTrimmed),
        ("testTruncate", testTruncate),
        ("testTruncated", testTruncated),
        ("testUnderline", testUnderline),
        ("testUnicodeArray", testUnicodeArray),
        ("testUrl", testUrl),
        ("testUrlDecode", testUrlDecode),
        ("testUrlDecoded", testUrlDecoded),
        ("testUrlEncode", testUrlEncode),
        ("testUrlEncoded", testUrlEncoded),
        ("testWithoutSpacesAndNewLines", testWithoutSpacesAndNewLines),
        ("testWords", testWords),
        ("testWordsCount", testWordsCount),
    ]
}

extension StringProtocolExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringProtocolExtensionsTests = [
        ("testCommonSuffix", testCommonSuffix),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ArrayExtensionsTests.__allTests__ArrayExtensionsTests),
        testCase(BidirectionalCollectionExtensionsTests.__allTests__BidirectionalCollectionExtensionsTests),
        testCase(BinaryFloatingPointExtensionsTests.__allTests__BinaryFloatingPointExtensionsTests),
        testCase(BoolExtensionsTests.__allTests__BoolExtensionsTests),
        testCase(CharacterExtensionsTests.__allTests__CharacterExtensionsTests),
        testCase(CollectionExtensionsTests.__allTests__CollectionExtensionsTests),
        testCase(ComparableExtensionsTests.__allTests__ComparableExtensionsTests),
        testCase(DictionaryExtensionsTests.__allTests__DictionaryExtensionsTests),
        testCase(DoubleExtensionsTests.__allTests__DoubleExtensionsTests),
        testCase(FloatExtensionsTests.__allTests__FloatExtensionsTests),
        testCase(FloatingPointExtensionsTests.__allTests__FloatingPointExtensionsTests),
        testCase(IntExtensionsTests.__allTests__IntExtensionsTests),
        testCase(OptionalExtensionsTests.__allTests__OptionalExtensionsTests),
        testCase(RandomAccessCollectionExtensionsTests.__allTests__RandomAccessCollectionExtensionsTests),
        testCase(RangeReplaceableCollectionTests.__allTests__RangeReplaceableCollectionTests),
        testCase(SequenceExtensionsTests.__allTests__SequenceExtensionsTests),
        testCase(SignedIntegerExtensionsTests.__allTests__SignedIntegerExtensionsTests),
        testCase(SignedNumericExtensionsTests.__allTests__SignedNumericExtensionsTests),
        testCase(StringExtensionsTests.__allTests__StringExtensionsTests),
        testCase(StringProtocolExtensionsTests.__allTests__StringProtocolExtensionsTests),
    ]
}
#endif
